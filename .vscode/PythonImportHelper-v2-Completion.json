[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "get_encrypted_pwd",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_login_data",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_random_uuid",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "execjs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "execjs",
        "description": "execjs",
        "detail": "execjs",
        "documentation": {}
    },
    {
        "label": "get_cookies",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_cookies(session: requests.Session) -> bool:\n    path = Path(\"cookies.json\")\n    if path.exists():\n        cookies_text = path.read_text()\n        cookies_dict = json.loads(cookies_text)\n        session.cookies.update(cookies_dict)\n        return True\n    else:\n        return False\ndef login(username, password):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def login(username, password):\n    session = requests.Session()\n    if not get_cookies(session):\n        login_url = \"https://authserver.ucass.edu.cn/authserver/login\"\n        login_data = get_login_data(session, login_url, username, password)\n        # cookie should have JESSIONID, springframework\n        # expect: 302, cookies\n        login_resp = session.post(login_url, data=login_data, allow_redirects=False)\n        login_do_url = session.get_redirect_target(login_resp)\n        login_do_resp = session.get(login_do_url, allow_redirects=False)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "seats_login",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def seats_login(login_session: requests.Session):\n    seat_session = requests.session()\n    issue_to_login = 'https://seat-lx.ucass.edu.cn/ic-web/auth/address?finalAddress=https:%2F%2Fseat-lx.ucass.edu.cn&errPageUrl=https:%2F%2Fseat-lx.ucass.edu.cn%2F%23%2Ferror&manager=false&consoleType=16'\n    issue_to_login_resp = seat_session.get(issue_to_login, allow_redirects=False)\n    to_login_url = issue_to_login_resp.json()[\"data\"]\n    to_login_resp = login_session.get(to_login_url, allow_redirects=False)\n    auth_url = login_session.get_redirect_target(to_login_resp)\n    auth_resp = login_session.get(auth_url, allow_redirects=False)\n    ticket_url = seat_session.get_redirect_target(auth_resp)\n    ticket_resp = seat_session.get(ticket_url, allow_redirects=False)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "USER_AGENT",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "USER_AGENT = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36\"\nGENERAL_HEADERS = {\n    'User-Agent': USER_AGENT,\n}\ndef get_cookies(session: requests.Session) -> bool:\n    path = Path(\"cookies.json\")\n    if path.exists():\n        cookies_text = path.read_text()\n        cookies_dict = json.loads(cookies_text)\n        session.cookies.update(cookies_dict)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "GENERAL_HEADERS",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "GENERAL_HEADERS = {\n    'User-Agent': USER_AGENT,\n}\ndef get_cookies(session: requests.Session) -> bool:\n    path = Path(\"cookies.json\")\n    if path.exists():\n        cookies_text = path.read_text()\n        cookies_dict = json.loads(cookies_text)\n        session.cookies.update(cookies_dict)\n        return True",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "login_session",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "login_session = login('20241141128', 'frNwzTNNeGnAkkq6ADpAqv*ZGvPHYU')\nseats_resp = login_session.get('https://seat-lx.ucass.edu.cn/#/ic/home', allow_redirects=False)\nseats_resp = seats_login(login_session)\nprint(seats_resp.cookies.get_dict())",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "seats_resp",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "seats_resp = login_session.get('https://seat-lx.ucass.edu.cn/#/ic/home', allow_redirects=False)\nseats_resp = seats_login(login_session)\nprint(seats_resp.cookies.get_dict())",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "seats_resp",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "seats_resp = seats_login(login_session)\nprint(seats_resp.cookies.get_dict())",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_encrypted_pwd",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_encrypted_pwd(password, salt):\n    with open('encrypt.js', 'r') as file:\n        js_code = file.read()\n    ctx = execjs.compile(js_code)\n    result = ctx.call('encryptPassword', password, salt)\n    return result\ndef get_random_uuid():\n    return str(uuid.uuid4()).replace('-', '')\ndef get_login_data(session: requests.Session, login_url, username, password):\n    login_resp = session.get(login_url, allow_redirects=False)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_random_uuid",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_random_uuid():\n    return str(uuid.uuid4()).replace('-', '')\ndef get_login_data(session: requests.Session, login_url, username, password):\n    login_resp = session.get(login_url, allow_redirects=False)\n    soup = BeautifulSoup(login_resp.text, 'html.parser')\n    salt_element = soup.find(id='pwdEncryptSalt')\n    execution_element = soup.find(id='execution')\n    salt = salt_element['value'] if salt_element else \"\"\n    execution = execution_element['value'] if execution_element else \"\"\n    encrypted_password = get_encrypted_pwd(password, salt)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_login_data",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_login_data(session: requests.Session, login_url, username, password):\n    login_resp = session.get(login_url, allow_redirects=False)\n    soup = BeautifulSoup(login_resp.text, 'html.parser')\n    salt_element = soup.find(id='pwdEncryptSalt')\n    execution_element = soup.find(id='execution')\n    salt = salt_element['value'] if salt_element else \"\"\n    execution = execution_element['value'] if execution_element else \"\"\n    encrypted_password = get_encrypted_pwd(password, salt)\n    login_data = {\n        \"username\": username,",
        "detail": "utils",
        "documentation": {}
    }
]