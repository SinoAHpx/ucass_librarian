[
    {
        "label": "AES",
        "importPath": "Crypto.Cipher",
        "description": "Crypto.Cipher",
        "isExtraImport": true,
        "detail": "Crypto.Cipher",
        "documentation": {}
    },
    {
        "label": "pad",
        "importPath": "Crypto.Util.Padding",
        "description": "Crypto.Util.Padding",
        "isExtraImport": true,
        "detail": "Crypto.Util.Padding",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "get_encrypted_pwd",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_login_data",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_random_uuid",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_login_data",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "execjs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "execjs",
        "description": "execjs",
        "detail": "execjs",
        "documentation": {}
    },
    {
        "label": "encrypt_password",
        "importPath": "encrypt",
        "description": "encrypt",
        "isExtraImport": true,
        "detail": "encrypt",
        "documentation": {}
    },
    {
        "label": "random_string",
        "kind": 2,
        "importPath": "encrypt",
        "description": "encrypt",
        "peekOfCode": "def random_string(length):\n    chars = \"ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678\"\n    return ''.join(random.choice(chars) for _ in range(length))\ndef encrypt_password(password, key):\n    if not key:\n        return password\n    try:\n        # Generate a 64-character random prefix (matching JS implementation)\n        random_prefix = random_string(64)\n        # Combine prefix and password",
        "detail": "encrypt",
        "documentation": {}
    },
    {
        "label": "encrypt_password",
        "kind": 2,
        "importPath": "encrypt",
        "description": "encrypt",
        "peekOfCode": "def encrypt_password(password, key):\n    if not key:\n        return password\n    try:\n        # Generate a 64-character random prefix (matching JS implementation)\n        random_prefix = random_string(64)\n        # Combine prefix and password\n        plaintext = (random_prefix + password).encode('utf-8')\n        # Pad key to 32 bytes\n        key_bytes = key.encode('utf-8')",
        "detail": "encrypt",
        "documentation": {}
    },
    {
        "label": "get_cookies",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_cookies(session: requests.Session) -> bool:\n    path = Path(\"cookies.json\")\n    if path.exists():\n        cookies_text = path.read_text()\n        cookies_dict = json.loads(cookies_text)\n        session.cookies.update(cookies_dict)\n        return True\n    else:\n        return False\ndef login(username, password):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def login(username, password):\n    session = requests.Session()\n    if not get_cookies(session):\n        login_url = \"https://authserver.ucass.edu.cn/authserver/login\"\n        login_data = get_login_data(session, login_url, username, password)\n        # cookie should have JESSIONID, springframework\n        # expect: 302, cookies\n        login_resp = session.post(login_url, data=login_data, allow_redirects=False)\n        login_do_url = session.get_redirect_target(login_resp)\n        login_do_resp = session.get(login_do_url, allow_redirects=False)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "seats_login",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def seats_login(login_session: requests.Session):\n    seat_session = requests.session()\n    issue_to_login = 'https://seat-lx.ucass.edu.cn/ic-web/auth/address?finalAddress=https:%2F%2Fseat-lx.ucass.edu.cn&errPageUrl=https:%2F%2Fseat-lx.ucass.edu.cn%2F%23%2Ferror&manager=false&consoleType=16'\n    issue_to_login_resp = seat_session.get(issue_to_login, allow_redirects=False)\n    to_login_url = issue_to_login_resp.json()[\"data\"]\n    to_login_resp = login_session.get(to_login_url, allow_redirects=False)\n    auth_url = login_session.get_redirect_target(to_login_resp)\n    auth_resp = login_session.get(auth_url, allow_redirects=False)\n    ticket_url = seat_session.get_redirect_target(auth_resp)\n    ticket_resp = seat_session.get(ticket_url, allow_redirects=False)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "USER_AGENT",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "USER_AGENT = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36\"\nGENERAL_HEADERS = {\n    'User-Agent': USER_AGENT,\n}\ndef get_cookies(session: requests.Session) -> bool:\n    path = Path(\"cookies.json\")\n    if path.exists():\n        cookies_text = path.read_text()\n        cookies_dict = json.loads(cookies_text)\n        session.cookies.update(cookies_dict)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "GENERAL_HEADERS",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "GENERAL_HEADERS = {\n    'User-Agent': USER_AGENT,\n}\ndef get_cookies(session: requests.Session) -> bool:\n    path = Path(\"cookies.json\")\n    if path.exists():\n        cookies_text = path.read_text()\n        cookies_dict = json.loads(cookies_text)\n        session.cookies.update(cookies_dict)\n        return True",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "login_session",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "login_session = login('20241141128', 'frNwzTNNeGnAkkq6ADpAqv*ZGvPHYU')\nseats_resp = login_session.get('https://seat-lx.ucass.edu.cn/#/ic/home', allow_redirects=False)\nseats_resp = seats_login(login_session)\nprint(seats_resp.cookies.get_dict())",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "seats_resp",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "seats_resp = login_session.get('https://seat-lx.ucass.edu.cn/#/ic/home', allow_redirects=False)\nseats_resp = seats_login(login_session)\nprint(seats_resp.cookies.get_dict())",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "seats_resp",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "seats_resp = seats_login(login_session)\nprint(seats_resp.cookies.get_dict())",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "issue_to_login_url",
        "kind": 2,
        "importPath": "new",
        "description": "new",
        "peekOfCode": "def issue_to_login_url():\n    issue_url = \"https://seat-lx.ucass.edu.cn/ic-web/auth/address?finalAddress=https://seat-lx.ucass.edu.cn&errPageUrl=https://seat-lx.ucass.edu.cn/#/error&manager=false&consoleType=16\"\n    resp = session.get(issue_url, allow_redirects=False)\n    json = resp.json()\n    return json[\"data\"]\ndef issue_form_login_url(to_login):\n    resp = session.get(to_login, allow_redirects=False)\n    redir = resp.headers[\"Location\"]\n    return redir\ndef login_form(form_url: str, username: str, password: str):",
        "detail": "new",
        "documentation": {}
    },
    {
        "label": "issue_form_login_url",
        "kind": 2,
        "importPath": "new",
        "description": "new",
        "peekOfCode": "def issue_form_login_url(to_login):\n    resp = session.get(to_login, allow_redirects=False)\n    redir = resp.headers[\"Location\"]\n    return redir\ndef login_form(form_url: str, username: str, password: str):\n    #to get cookie\n    login_resp = session.get(form_url, allow_redirects=False)\n    login_resp = session.get(form_url, allow_redirects=False)\n    # start login\n    login_data = get_login_data(session, form_url, username, password)",
        "detail": "new",
        "documentation": {}
    },
    {
        "label": "login_form",
        "kind": 2,
        "importPath": "new",
        "description": "new",
        "peekOfCode": "def login_form(form_url: str, username: str, password: str):\n    #to get cookie\n    login_resp = session.get(form_url, allow_redirects=False)\n    login_resp = session.get(form_url, allow_redirects=False)\n    # start login\n    login_data = get_login_data(session, form_url, username, password)\n    login_resp = session.post(form_url, data=login_data, allow_redirects=False)\n    return login_resp\ndef get_ic_cookie(login_resp: requests.Response):\n    url = session.get_redirect_target(login_resp)",
        "detail": "new",
        "documentation": {}
    },
    {
        "label": "get_ic_cookie",
        "kind": 2,
        "importPath": "new",
        "description": "new",
        "peekOfCode": "def get_ic_cookie(login_resp: requests.Response):\n    url = session.get_redirect_target(login_resp)\n    ic_resp = session.get(url, allow_redirects=False)\n    url = session.get_redirect_target(ic_resp)\n    ic_resp = session.get(url, allow_redirects=False)\n    return ic_resp.cookies.get_dict()\ndef login(username, password):\n    to_login_url = issue_to_login_url()\n    form_url = issue_form_login_url(to_login_url)\n    login_resp = login_form(form_url, username, password)",
        "detail": "new",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "new",
        "description": "new",
        "peekOfCode": "def login(username, password):\n    to_login_url = issue_to_login_url()\n    form_url = issue_form_login_url(to_login_url)\n    login_resp = login_form(form_url, username, password)\n    ic = get_ic_cookie(login_resp)\n    return ic[\"ic-cookie\"]\ndef get_lib_user_info(ic: str):\n    url = \"https://seat-lx.ucass.edu.cn/ic-web/auth/userInfo\"\n    session.cookies.update({\"ic-cookie\": ic})\n    resp = session.get(url)",
        "detail": "new",
        "documentation": {}
    },
    {
        "label": "get_lib_user_info",
        "kind": 2,
        "importPath": "new",
        "description": "new",
        "peekOfCode": "def get_lib_user_info(ic: str):\n    url = \"https://seat-lx.ucass.edu.cn/ic-web/auth/userInfo\"\n    session.cookies.update({\"ic-cookie\": ic})\n    resp = session.get(url)\n    json = resp.json()\n    return json\n# result is to indicate whether a re-login is needed\ndef reserve(ic: str, seat: int, start_time: datetime, end_time: datetime) -> bool:\n    if start_time < datetime.now() or end_time < datetime.now():\n        print('start time or end time should not be ealier than current time. ')",
        "detail": "new",
        "documentation": {}
    },
    {
        "label": "reserve",
        "kind": 2,
        "importPath": "new",
        "description": "new",
        "peekOfCode": "def reserve(ic: str, seat: int, start_time: datetime, end_time: datetime) -> bool:\n    if start_time < datetime.now() or end_time < datetime.now():\n        print('start time or end time should not be ealier than current time. ')\n        return True\n    url = \"https://seat-lx.ucass.edu.cn/ic-web/reserve\"\n    json = get_lib_user_info(ic)\n    if json[\"code\"] != 0:\n        print('Login expired')\n        return False\n    json = json[\"data\"]",
        "detail": "new",
        "documentation": {}
    },
    {
        "label": "get_seat_menu",
        "kind": 2,
        "importPath": "new",
        "description": "new",
        "peekOfCode": "def get_seat_menu():\n    url = \"https://seat-lx.ucass.edu.cn/ic-web/seatMenu\"\n# reserve_params = {\n#     'ic': \"84d6850c-7079-4d94-8f3f-c1b826a95dad\",\n#     'seat': 100237659,\n#     'start_time': datetime(2024,11,29,20,00,00),\n#     'end_time': datetime(2024,11,29,22,00,00)\n# }\n# if not reserve(**reserve_params):\n#     ic = login(\"20241141128\", \"frNwzTNNeGnAkkq6ADpAqv*ZGvPHYU\")",
        "detail": "new",
        "documentation": {}
    },
    {
        "label": "USER_AGENT",
        "kind": 5,
        "importPath": "new",
        "description": "new",
        "peekOfCode": "USER_AGENT = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\"\nsession = requests.Session()\nsession.headers.update({\n    \"User-Agent\": USER_AGENT\n})\ndef issue_to_login_url():\n    issue_url = \"https://seat-lx.ucass.edu.cn/ic-web/auth/address?finalAddress=https://seat-lx.ucass.edu.cn&errPageUrl=https://seat-lx.ucass.edu.cn/#/error&manager=false&consoleType=16\"\n    resp = session.get(issue_url, allow_redirects=False)\n    json = resp.json()\n    return json[\"data\"]",
        "detail": "new",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "new",
        "description": "new",
        "peekOfCode": "session = requests.Session()\nsession.headers.update({\n    \"User-Agent\": USER_AGENT\n})\ndef issue_to_login_url():\n    issue_url = \"https://seat-lx.ucass.edu.cn/ic-web/auth/address?finalAddress=https://seat-lx.ucass.edu.cn&errPageUrl=https://seat-lx.ucass.edu.cn/#/error&manager=false&consoleType=16\"\n    resp = session.get(issue_url, allow_redirects=False)\n    json = resp.json()\n    return json[\"data\"]\ndef issue_form_login_url(to_login):",
        "detail": "new",
        "documentation": {}
    },
    {
        "label": "ic",
        "kind": 5,
        "importPath": "new",
        "description": "new",
        "peekOfCode": "ic = login(\"20241141128\", \"frNwzTNNeGnAkkq6ADpAqv*ZGvPHYU\")\nprint(ic)\n# j = get_lib_user_info(\"68435aaf-32bd-4549-be70-85e80c005a9c\")\n# print(j)",
        "detail": "new",
        "documentation": {}
    },
    {
        "label": "get_encrypted_pwd",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_encrypted_pwd(password, salt):\n    with open('encrypt.js', 'r') as file:\n        js_code = file.read()\n    ctx = execjs.compile(js_code)\n    result = ctx.call('encryptPassword', password, salt)\n    return result\ndef get_random_uuid():\n    return str(uuid.uuid4()).replace('-', '')\ndef get_login_data(session: requests.Session, login_url, username, password):\n    login_resp = session.get(login_url, allow_redirects=False)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_random_uuid",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_random_uuid():\n    return str(uuid.uuid4()).replace('-', '')\ndef get_login_data(session: requests.Session, login_url, username, password):\n    login_resp = session.get(login_url, allow_redirects=False)\n    soup = BeautifulSoup(login_resp.text, 'html.parser')\n    salt_element = soup.find(id='pwdEncryptSalt')\n    execution_element = soup.find(id='execution')\n    salt = salt_element['value'] if salt_element else \"\"\n    execution = execution_element['value'] if execution_element else \"\"\n    encrypted_password = get_encrypted_pwd(password, salt)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_login_data",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_login_data(session: requests.Session, login_url, username, password):\n    login_resp = session.get(login_url, allow_redirects=False)\n    soup = BeautifulSoup(login_resp.text, 'html.parser')\n    salt_element = soup.find(id='pwdEncryptSalt')\n    execution_element = soup.find(id='execution')\n    salt = salt_element['value'] if salt_element else \"\"\n    execution = execution_element['value'] if execution_element else \"\"\n    encrypted_password = get_encrypted_pwd(password, salt)\n    login_data = {\n        \"username\": username,",
        "detail": "utils",
        "documentation": {}
    }
]